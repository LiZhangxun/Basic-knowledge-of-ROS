/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-08-13 14:42:46.597385
/// Generated using solver translationxy2d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0;
x0=IKsin(j[0]);
eetrans[0]=((((0.48)*x0*(IKcos(j[1]))))+(((0.33)*x0))+(((0.48)*(IKcos(j[0]))*(IKsin(j[1])))));
eetrans[1]=0.0791;
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 2; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x22000008; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_px,px,npx,new_py,py,npy;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1];

new_px=px;
new_py=-0.0277;
px = new_px; py = new_py;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=((-1.07102272727273)+(((3.15656565656566)*(px*px)))+(((3.15656565656566)*(py*py))));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
IkReal x1=px*px;
IkReal x2=py*py;
IkReal x3=((12.0)*py);
IkReal x4=((12.0)*px);
j4eval[0]=(x2+x1);
j4eval[1]=IKsign(((((25.0)*x1))+(((25.0)*x2))));
j4eval[2]=((IKabs(((((-1.0)*cj5*x3))+((sj5*x4))+(((-8.25)*py)))))+(IKabs(((((8.25)*px))+((cj5*x4))+((sj5*x3))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5=(cj5*py);
IkReal x6=(px*sj5);
j4eval[0]=((((1.45454545454545)*x5))+(((1.45454545454545)*x6))+py);
j4eval[1]=IKsign(((((8.25)*py))+(((12.0)*x5))+(((12.0)*x6))));
j4eval[2]=((IKabs(((-2.7225)+(((25.0)*(px*px)))+(((-7.92)*cj5))+(((-5.76)*(cj5*cj5))))))+(IKabs(((((5.76)*cj5*sj5))+(((25.0)*px*py))+(((3.96)*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=((((-1.45454545454545)*py*sj5))+px+(((1.45454545454545)*cj5*px)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7=px*px;
IkReal x8=((((2.11570247933884)*(py*py)))+(((2.11570247933884)*x7)));
IkReal x16 = x8;
if(IKabs(x16)==0){
continue;
}
IkReal x9=pow(x16,-0.5);
if((x8) < -0.00001)
continue;
IkReal x10=IKabs(IKsqrt(x8));
IkReal x11=((1.45454545454545)*x9);
CheckValue<IkReal> x17=IKPowWithIntegerCheck(x10,-1);
if(!x17.valid){
continue;
}
IkReal x12=x17.value;
IkReal x13=(px*x12);
IkReal x14=(py*x11);
if((((1.0)+(((-1.0)*x7*(x12*x12))))) < -0.00001)
continue;
IkReal x15=IKsqrt(((1.0)+(((-1.0)*x7*(x12*x12)))));
CheckValue<IkReal> x18 = IKatan2WithCheck(IkReal(((1.45454545454545)*px)),IkReal(((-1.45454545454545)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x18.valid){
continue;
}
if( (x13) < -1-IKFAST_SINCOS_THRESH || (x13) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x18.value)))+(((-1.0)*(IKasin(x13)))));
IkReal gconst1=((((-1.0)*px*x11*x15))+((x13*x14)));
IkReal gconst2=((((-1.0)*x11*x12*x7))+(((-1.0)*x14*x15)));
CheckValue<IkReal> x19 = IKatan2WithCheck(IkReal(((1.45454545454545)*px)),IkReal(((-1.45454545454545)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x19.valid){
continue;
}
if((((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x20=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px)))))),-1);
if(!x20.valid){
continue;
}
if( ((px*(x20.value))) < -1-IKFAST_SINCOS_THRESH || ((px*(x20.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x19.value)+(IKasin((px*(x20.value))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x21=px*px;
IkReal x22=x8;
IkReal x31 = x22;
if(IKabs(x31)==0){
continue;
}
IkReal x23=pow(x31,-0.5);
if((x22) < -0.00001)
continue;
IkReal x24=IKabs(IKsqrt(x22));
IkReal x25=((1.45454545454545)*x23);
CheckValue<IkReal> x32=IKPowWithIntegerCheck(x24,-1);
if(!x32.valid){
continue;
}
IkReal x26=x32.value;
IkReal x27=(px*x26);
IkReal x28=(py*x25);
if((((1.0)+(((-1.0)*x21*(x26*x26))))) < -0.00001)
continue;
IkReal x29=IKsqrt(((1.0)+(((-1.0)*x21*(x26*x26)))));
CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(((1.45454545454545)*px)),IkReal(((-1.45454545454545)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
if( (x27) < -1-IKFAST_SINCOS_THRESH || (x27) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x30=((((-1.0)*(x33.value)))+(((-1.0)*(IKasin(x27)))));
sj5=gconst1;
cj5=gconst2;
j5=x30;
IkReal gconst0=x30;
IkReal gconst1=((((-1.0)*px*x25*x29))+((x27*x28)));
IkReal gconst2=((((-1.0)*x28*x29))+(((-1.0)*x21*x25*x26)));
IkReal x34=px*px;
IkReal x35=py*py;
j4eval[0]=(x35+x34);
j4eval[1]=IKsign(((((25.0)*x34))+(((25.0)*x35))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x36=IKPowWithIntegerCheck(IKsign(((((8.25)*py))+(((12.0)*gconst2*py))+(((12.0)*gconst1*px)))),-1);
if(!x36.valid){
continue;
}
CheckValue<IkReal> x37 = IKatan2WithCheck(IkReal(((((5.76)*gconst1*gconst2))+(((3.96)*gconst1))+(((25.0)*px*py)))),IkReal(((-2.7225)+(((-5.76)*(gconst2*gconst2)))+(((25.0)*(px*px)))+(((-7.92)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x37.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x36.value)))+(x37.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x38=IKsin(j4);
IkReal x39=IKcos(j4);
IkReal x40=((0.48)*gconst2);
IkReal x41=((1.0)*py);
IkReal x42=((0.48)*gconst1);
IkReal x43=((1.0)*px);
IkReal x44=(px*x38);
evalcond[0]=((((-1.0)*x38*x41))+(((-1.0)*x39*x43))+x42);
evalcond[1]=((-0.33)+(((-1.0)*x40))+(((-1.0)*x39*x41))+x44);
evalcond[2]=((((-1.0)*x43))+((x38*x40))+((x39*x42))+(((0.33)*x38)));
evalcond[3]=((((-0.33)*x39))+(((-1.0)*x41))+(((-1.0)*x39*x40))+((x38*x42)));
evalcond[4]=((0.1215)+(((0.66)*x44))+(((-1.0)*py*x41))+(((-0.66)*py*x39))+(((-1.0)*px*x43)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x45=((12.0)*gconst2);
IkReal x46=((12.0)*gconst1);
CheckValue<IkReal> x47 = IKatan2WithCheck(IkReal(((((8.25)*px))+((py*x46))+((px*x45)))),IkReal(((((-1.0)*py*x45))+((px*x46))+(((-8.25)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x47.valid){
continue;
}
CheckValue<IkReal> x48=IKPowWithIntegerCheck(IKsign(((((25.0)*(px*px)))+(((25.0)*(py*py))))),-1);
if(!x48.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x47.value)+(((1.5707963267949)*(x48.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x49=IKsin(j4);
IkReal x50=IKcos(j4);
IkReal x51=((0.48)*gconst2);
IkReal x52=((1.0)*py);
IkReal x53=((0.48)*gconst1);
IkReal x54=((1.0)*px);
IkReal x55=(px*x49);
evalcond[0]=((((-1.0)*x49*x52))+x53+(((-1.0)*x50*x54)));
evalcond[1]=((-0.33)+x55+(((-1.0)*x51))+(((-1.0)*x50*x52)));
evalcond[2]=(((x50*x53))+((x49*x51))+(((0.33)*x49))+(((-1.0)*x54)));
evalcond[3]=((((-0.33)*x50))+((x49*x53))+(((-1.0)*x52))+(((-1.0)*x50*x51)));
evalcond[4]=((0.1215)+(((-1.0)*px*x54))+(((-0.66)*py*x50))+(((0.66)*x55))+(((-1.0)*py*x52)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x56=px*px;
IkReal x57=((((2.11570247933884)*(py*py)))+(((2.11570247933884)*x56)));
IkReal x65 = x57;
if(IKabs(x65)==0){
continue;
}
IkReal x58=pow(x65,-0.5);
if((x57) < -0.00001)
continue;
IkReal x59=IKabs(IKsqrt(x57));
IkReal x60=((1.45454545454545)*x58);
CheckValue<IkReal> x66=IKPowWithIntegerCheck(x59,-1);
if(!x66.valid){
continue;
}
IkReal x61=x66.value;
IkReal x62=(px*x61);
IkReal x63=(py*x60);
if((((1.0)+(((-1.0)*x56*(x61*x61))))) < -0.00001)
continue;
IkReal x64=IKsqrt(((1.0)+(((-1.0)*x56*(x61*x61)))));
CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(((1.45454545454545)*px)),IkReal(((-1.45454545454545)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x67.valid){
continue;
}
if( (x62) < -1-IKFAST_SINCOS_THRESH || (x62) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x67.value)))+(IKasin(x62)));
IkReal gconst4=(((px*x60*x64))+((x62*x63)));
IkReal gconst5=(((x63*x64))+(((-1.0)*x56*x60*x61)));
if((((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x68=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px)))))),-1);
if(!x68.valid){
continue;
}
if( ((px*(x68.value))) < -1-IKFAST_SINCOS_THRESH || ((px*(x68.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(((1.45454545454545)*px)),IkReal(((-1.45454545454545)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((px*(x68.value))))))+(x69.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x70=px*px;
CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal(((1.45454545454545)*px)),IkReal(((-1.45454545454545)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
IkReal x71=((1.0)*(x81.value));
IkReal x72=x57;
IkReal x82 = x72;
if(IKabs(x82)==0){
continue;
}
IkReal x73=pow(x82,-0.5);
if((x72) < -0.00001)
continue;
IkReal x74=IKabs(IKsqrt(x72));
IkReal x75=((1.45454545454545)*x73);
CheckValue<IkReal> x83=IKPowWithIntegerCheck(x74,-1);
if(!x83.valid){
continue;
}
IkReal x76=x83.value;
IkReal x77=(px*x76);
IkReal x78=(py*x75);
if( (x77) < -1-IKFAST_SINCOS_THRESH || (x77) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x79=IKasin(x77);
if((((1.0)+(((-1.0)*x70*(x76*x76))))) < -0.00001)
continue;
IkReal x80=IKsqrt(((1.0)+(((-1.0)*x70*(x76*x76)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x71))+x79);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x71))+x79);
IkReal gconst4=(((px*x75*x80))+((x77*x78)));
IkReal gconst5=(((x78*x80))+(((-1.0)*x70*x75*x76)));
IkReal x84=px*px;
IkReal x85=py*py;
j4eval[0]=(x84+x85);
j4eval[1]=IKsign(((((25.0)*x85))+(((25.0)*x84))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x86 = IKatan2WithCheck(IkReal(((((5.76)*gconst4*gconst5))+(((3.96)*gconst4))+(((25.0)*px*py)))),IkReal(((-2.7225)+(((25.0)*(px*px)))+(((-5.76)*(gconst5*gconst5)))+(((-7.92)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x86.valid){
continue;
}
CheckValue<IkReal> x87=IKPowWithIntegerCheck(IKsign(((((8.25)*py))+(((12.0)*gconst4*px))+(((12.0)*gconst5*py)))),-1);
if(!x87.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x86.value)+(((1.5707963267949)*(x87.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x88=IKsin(j4);
IkReal x89=IKcos(j4);
IkReal x90=((1.0)*px);
IkReal x91=((0.48)*gconst4);
IkReal x92=((0.48)*gconst5);
IkReal x93=((1.0)*py);
IkReal x94=((0.48)*x88);
IkReal x95=(px*x88);
IkReal x96=(py*x89);
evalcond[0]=(x91+(((-1.0)*x88*x93))+(((-1.0)*x89*x90)));
evalcond[1]=((-0.33)+x95+(((-1.0)*x92))+(((-1.0)*x89*x93)));
evalcond[2]=(((x89*x91))+((x88*x92))+(((0.33)*x88))+(((-1.0)*x90)));
evalcond[3]=((((-0.33)*x89))+((x88*x91))+(((-1.0)*x93))+(((-1.0)*x89*x92)));
evalcond[4]=((0.1215)+(((-0.66)*x96))+(((0.66)*x95))+(((-1.0)*px*x90))+(((-1.0)*py*x93)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x97=((12.0)*gconst4);
IkReal x98=((12.0)*gconst5);
CheckValue<IkReal> x99=IKPowWithIntegerCheck(IKsign(((((25.0)*(px*px)))+(((25.0)*(py*py))))),-1);
if(!x99.valid){
continue;
}
CheckValue<IkReal> x100 = IKatan2WithCheck(IkReal(((((8.25)*px))+((py*x97))+((px*x98)))),IkReal((((px*x97))+(((-1.0)*py*x98))+(((-8.25)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x99.value)))+(x100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x101=IKsin(j4);
IkReal x102=IKcos(j4);
IkReal x103=((1.0)*px);
IkReal x104=((0.48)*gconst4);
IkReal x105=((0.48)*gconst5);
IkReal x106=((1.0)*py);
IkReal x107=((0.48)*x101);
IkReal x108=(px*x101);
IkReal x109=(py*x102);
evalcond[0]=((((-1.0)*x101*x106))+x104+(((-1.0)*x102*x103)));
evalcond[1]=((-0.33)+(((-1.0)*x105))+x108+(((-1.0)*x102*x106)));
evalcond[2]=((((-1.0)*x103))+(((0.33)*x101))+((x102*x104))+((x101*x105)));
evalcond[3]=((((-0.33)*x102))+(((-1.0)*x106))+(((-1.0)*x102*x105))+((x101*x104)));
evalcond[4]=((0.1215)+(((-1.0)*px*x103))+(((0.66)*x108))+(((-0.66)*x109))+(((-1.0)*py*x106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x110=py*py;
IkReal x111=((((2.11570247933884)*(px*px)))+(((2.11570247933884)*x110)));
IkReal x118 = x111;
if(IKabs(x118)==0){
continue;
}
IkReal x112=pow(x118,-0.5);
if((x111) < -0.00001)
continue;
IkReal x113=IKabs(IKsqrt(x111));
IkReal x114=((1.45454545454545)*x112);
CheckValue<IkReal> x119=IKPowWithIntegerCheck(x113,-1);
if(!x119.valid){
continue;
}
IkReal x115=x119.value;
IkReal x116=(py*x115);
if((((1.0)+(((-1.0)*x110*(x115*x115))))) < -0.00001)
continue;
IkReal x117=IKsqrt(((1.0)+(((-1.0)*x110*(x115*x115)))));
if( (x116) < -1-IKFAST_SINCOS_THRESH || (x116) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(((1.45454545454545)*py)),IkReal(((1.45454545454545)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
IkReal gconst6=((((-1.0)*(IKasin(x116))))+(((-1.0)*(x120.value))));
IkReal gconst7=((((-1.0)*px*x114*x116))+(((-1.0)*py*x114*x117)));
IkReal gconst8=((((-1.0)*x110*x114*x115))+((px*x114*x117)));
if((((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x121=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px)))))),-1);
if(!x121.valid){
continue;
}
if( ((py*(x121.value))) < -1-IKFAST_SINCOS_THRESH || ((py*(x121.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(((1.45454545454545)*py)),IkReal(((1.45454545454545)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x122.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin((py*(x121.value))))+(x122.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x123=py*py;
IkReal x124=x111;
IkReal x132 = x124;
if(IKabs(x132)==0){
continue;
}
IkReal x125=pow(x132,-0.5);
if((x124) < -0.00001)
continue;
IkReal x126=IKabs(IKsqrt(x124));
IkReal x127=((1.45454545454545)*x125);
CheckValue<IkReal> x133=IKPowWithIntegerCheck(x126,-1);
if(!x133.valid){
continue;
}
IkReal x128=x133.value;
IkReal x129=(py*x128);
if((((1.0)+(((-1.0)*x123*(x128*x128))))) < -0.00001)
continue;
IkReal x130=IKsqrt(((1.0)+(((-1.0)*x123*(x128*x128)))));
if( (x129) < -1-IKFAST_SINCOS_THRESH || (x129) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((1.45454545454545)*py)),IkReal(((1.45454545454545)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x134.valid){
continue;
}
IkReal x131=((((-1.0)*(IKasin(x129))))+(((-1.0)*(x134.value))));
sj5=gconst7;
cj5=gconst8;
j5=x131;
IkReal gconst6=x131;
IkReal gconst7=((((-1.0)*py*x127*x130))+(((-1.0)*px*x127*x129)));
IkReal gconst8=(((px*x127*x130))+(((-1.0)*x123*x127*x128)));
IkReal x135=px*px;
IkReal x136=py*py;
j4eval[0]=(x135+x136);
j4eval[1]=IKsign(((((25.0)*x136))+(((25.0)*x135))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x137 = IKatan2WithCheck(IkReal(((-2.7225)+(((-5.76)*(gconst8*gconst8)))+(((25.0)*(py*py)))+(((-7.92)*gconst8)))),IkReal(((((-3.96)*gconst7))+(((25.0)*px*py))+(((-5.76)*gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x137.valid){
continue;
}
CheckValue<IkReal> x138=IKPowWithIntegerCheck(IKsign(((((12.0)*gconst7*py))+(((-12.0)*gconst8*px))+(((-8.25)*px)))),-1);
if(!x138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x137.value)+(((1.5707963267949)*(x138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x139=IKsin(j4);
IkReal x140=IKcos(j4);
IkReal x141=((0.48)*gconst8);
IkReal x142=((1.0)*py);
IkReal x143=((0.48)*gconst7);
IkReal x144=((1.0)*px);
IkReal x145=(px*x139);
evalcond[0]=((((-1.0)*x140*x144))+(((-1.0)*x139*x142))+x143);
evalcond[1]=((-0.33)+(((-1.0)*x141))+(((-1.0)*x140*x142))+x145);
evalcond[2]=((((-1.0)*x144))+((x140*x143))+(((0.33)*x139))+((x139*x141)));
evalcond[3]=((((-1.0)*x142))+(((-1.0)*x140*x141))+(((-0.33)*x140))+((x139*x143)));
evalcond[4]=((0.1215)+(((0.66)*x145))+(((-1.0)*py*x142))+(((-1.0)*px*x144))+(((-0.66)*py*x140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x146=((12.0)*gconst8);
IkReal x147=((12.0)*gconst7);
CheckValue<IkReal> x148=IKPowWithIntegerCheck(IKsign(((((25.0)*(px*px)))+(((25.0)*(py*py))))),-1);
if(!x148.valid){
continue;
}
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((((8.25)*px))+((px*x146))+((py*x147)))),IkReal(((((-1.0)*py*x146))+((px*x147))+(((-8.25)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x148.value)))+(x149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x150=IKsin(j4);
IkReal x151=IKcos(j4);
IkReal x152=((0.48)*gconst8);
IkReal x153=((1.0)*py);
IkReal x154=((0.48)*gconst7);
IkReal x155=((1.0)*px);
IkReal x156=(px*x150);
evalcond[0]=((((-1.0)*x151*x155))+(((-1.0)*x150*x153))+x154);
evalcond[1]=((-0.33)+(((-1.0)*x152))+(((-1.0)*x151*x153))+x156);
evalcond[2]=((((-1.0)*x155))+((x150*x152))+((x151*x154))+(((0.33)*x150)));
evalcond[3]=((((-1.0)*x153))+(((-1.0)*x151*x152))+((x150*x154))+(((-0.33)*x151)));
evalcond[4]=((0.1215)+(((0.66)*x156))+(((-1.0)*py*x153))+(((-1.0)*px*x155))+(((-0.66)*py*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x157=py*py;
IkReal x158=((((2.11570247933884)*(px*px)))+(((2.11570247933884)*x157)));
if((x158) < -0.00001)
continue;
IkReal x159=IKabs(IKsqrt(x158));
IkReal x165 = x158;
if(IKabs(x165)==0){
continue;
}
IkReal x160=pow(x165,-0.5);
IkReal x161=((1.45454545454545)*x160);
CheckValue<IkReal> x166=IKPowWithIntegerCheck(x159,-1);
if(!x166.valid){
continue;
}
IkReal x162=x166.value;
IkReal x163=(py*x162);
if((((1.0)+(((-1.0)*x157*(x162*x162))))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-1.0)*x157*(x162*x162)))));
if( (x163) < -1-IKFAST_SINCOS_THRESH || (x163) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x167 = IKatan2WithCheck(IkReal(((1.45454545454545)*py)),IkReal(((1.45454545454545)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x167.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(IKasin(x163))+(((-1.0)*(x167.value))));
IkReal gconst10=(((py*x161*x164))+(((-1.0)*px*x161*x163)));
IkReal gconst11=((((-1.0)*px*x161*x164))+(((-1.0)*x157*x161*x162)));
if((((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x168=IKPowWithIntegerCheck(IKabs(IKsqrt(((((2.11570247933884)*(py*py)))+(((2.11570247933884)*(px*px)))))),-1);
if(!x168.valid){
continue;
}
if( ((py*(x168.value))) < -1-IKFAST_SINCOS_THRESH || ((py*(x168.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x169 = IKatan2WithCheck(IkReal(((1.45454545454545)*py)),IkReal(((1.45454545454545)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x169.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((py*(x168.value))))))+(x169.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x170=py*py;
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(((1.45454545454545)*py)),IkReal(((1.45454545454545)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
IkReal x171=((1.0)*(x180.value));
IkReal x172=x158;
if((x172) < -0.00001)
continue;
IkReal x173=IKabs(IKsqrt(x172));
IkReal x181 = x172;
if(IKabs(x181)==0){
continue;
}
IkReal x174=pow(x181,-0.5);
IkReal x175=((1.45454545454545)*x174);
CheckValue<IkReal> x182=IKPowWithIntegerCheck(x173,-1);
if(!x182.valid){
continue;
}
IkReal x176=x182.value;
IkReal x177=(py*x176);
if( (x177) < -1-IKFAST_SINCOS_THRESH || (x177) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x178=IKasin(x177);
if((((1.0)+(((-1.0)*x170*(x176*x176))))) < -0.00001)
continue;
IkReal x179=IKsqrt(((1.0)+(((-1.0)*x170*(x176*x176)))));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x171))+x178);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x171))+x178);
IkReal gconst10=(((py*x175*x179))+(((-1.0)*px*x175*x177)));
IkReal gconst11=((((-1.0)*x170*x175*x176))+(((-1.0)*px*x175*x179)));
IkReal x183=px*px;
IkReal x184=py*py;
j4eval[0]=(x184+x183);
j4eval[1]=IKsign(((((25.0)*x183))+(((25.0)*x184))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal(((((3.96)*gconst10))+(((5.76)*gconst10*gconst11))+(((25.0)*px*py)))),IkReal(((-2.7225)+(((25.0)*(px*px)))+(((-7.92)*gconst11))+(((-5.76)*(gconst11*gconst11))))),IKFAST_ATAN2_MAGTHRESH);
if(!x185.valid){
continue;
}
CheckValue<IkReal> x186=IKPowWithIntegerCheck(IKsign(((((8.25)*py))+(((12.0)*gconst11*py))+(((12.0)*gconst10*px)))),-1);
if(!x186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x185.value)+(((1.5707963267949)*(x186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x187=IKsin(j4);
IkReal x188=IKcos(j4);
IkReal x189=((0.48)*gconst11);
IkReal x190=((1.0)*px);
IkReal x191=((1.0)*py);
IkReal x192=((0.48)*gconst10);
IkReal x193=((0.48)*x188);
IkReal x194=(px*x187);
IkReal x195=(py*x188);
evalcond[0]=((((-1.0)*x188*x190))+x192+(((-1.0)*x187*x191)));
evalcond[1]=((-0.33)+(((-1.0)*x188*x191))+(((-1.0)*x189))+x194);
evalcond[2]=(((x187*x189))+((x188*x192))+(((-1.0)*x190))+(((0.33)*x187)));
evalcond[3]=((((-1.0)*x188*x189))+((x187*x192))+(((-1.0)*x191))+(((-0.33)*x188)));
evalcond[4]=((0.1215)+(((-1.0)*py*x191))+(((0.66)*x194))+(((-0.66)*x195))+(((-1.0)*px*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x196=((12.0)*gconst10);
IkReal x197=((12.0)*gconst11);
CheckValue<IkReal> x198=IKPowWithIntegerCheck(IKsign(((((25.0)*(px*px)))+(((25.0)*(py*py))))),-1);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199 = IKatan2WithCheck(IkReal(((((8.25)*px))+((px*x197))+((py*x196)))),IkReal(((((-1.0)*py*x197))+((px*x196))+(((-8.25)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x198.value)))+(x199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x200=IKsin(j4);
IkReal x201=IKcos(j4);
IkReal x202=((0.48)*gconst11);
IkReal x203=((1.0)*px);
IkReal x204=((1.0)*py);
IkReal x205=((0.48)*gconst10);
IkReal x206=((0.48)*x201);
IkReal x207=(px*x200);
IkReal x208=(py*x201);
evalcond[0]=((((-1.0)*x200*x204))+(((-1.0)*x201*x203))+x205);
evalcond[1]=((-0.33)+(((-1.0)*x201*x204))+(((-1.0)*x202))+x207);
evalcond[2]=((((0.33)*x200))+((x200*x202))+((x201*x205))+(((-1.0)*x203)));
evalcond[3]=((((-1.0)*x201*x202))+((x200*x205))+(((-1.0)*x204))+(((-0.33)*x201)));
evalcond[4]=((0.1215)+(((-1.0)*px*x203))+(((0.66)*x207))+(((-1.0)*py*x204))+(((-0.66)*x208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
px=0;
py=0;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
px=0;
py=0;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x209=(cj5*px);
IkReal x210=(py*sj5);
CheckValue<IkReal> x211=IKPowWithIntegerCheck(((((206.25)*px))+(((300.0)*x209))+(((-300.0)*x210))),-1);
if(!x211.valid){
continue;
}
CheckValue<IkReal> x212=IKPowWithIntegerCheck(((((8.25)*px))+(((-12.0)*x210))+(((12.0)*x209))),-1);
if(!x212.valid){
continue;
}
if( IKabs(((x211.value)*(((-144.0)+(((625.0)*(px*px)))+(((144.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x212.value)*(((((5.76)*cj5*sj5))+(((3.96)*sj5))+(((-25.0)*px*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x211.value)*(((-144.0)+(((625.0)*(px*px)))+(((144.0)*(cj5*cj5)))))))+IKsqr(((x212.value)*(((((5.76)*cj5*sj5))+(((3.96)*sj5))+(((-25.0)*px*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x211.value)*(((-144.0)+(((625.0)*(px*px)))+(((144.0)*(cj5*cj5)))))), ((x212.value)*(((((5.76)*cj5*sj5))+(((3.96)*sj5))+(((-25.0)*px*py))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x213=IKsin(j4);
IkReal x214=IKcos(j4);
IkReal x215=((0.48)*cj5);
IkReal x216=((0.48)*sj5);
IkReal x217=((1.0)*px);
IkReal x218=((1.0)*py);
IkReal x219=(px*x213);
IkReal x220=(py*x214);
evalcond[0]=(x216+(((-1.0)*x213*x218))+(((-1.0)*x214*x217)));
evalcond[1]=((-0.33)+x219+(((-1.0)*x214*x218))+(((-1.0)*x215)));
evalcond[2]=(((x214*x216))+((x213*x215))+(((0.33)*x213))+(((-1.0)*x217)));
evalcond[3]=(((x213*x216))+(((-0.33)*x214))+(((-1.0)*x214*x215))+(((-1.0)*x218)));
evalcond[4]=((0.1215)+(((-1.0)*py*x218))+(((-1.0)*px*x217))+(((0.66)*x219))+(((-0.66)*x220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x221=IKPowWithIntegerCheck(IKsign(((((8.25)*py))+(((12.0)*px*sj5))+(((12.0)*cj5*py)))),-1);
if(!x221.valid){
continue;
}
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((((5.76)*cj5*sj5))+(((25.0)*px*py))+(((3.96)*sj5)))),IkReal(((-2.7225)+(((25.0)*(px*px)))+(((-7.92)*cj5))+(((-5.76)*(cj5*cj5))))),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x221.value)))+(x222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x223=IKsin(j4);
IkReal x224=IKcos(j4);
IkReal x225=((0.48)*cj5);
IkReal x226=((0.48)*sj5);
IkReal x227=((1.0)*px);
IkReal x228=((1.0)*py);
IkReal x229=(px*x223);
IkReal x230=(py*x224);
evalcond[0]=((((-1.0)*x224*x227))+x226+(((-1.0)*x223*x228)));
evalcond[1]=((-0.33)+(((-1.0)*x224*x228))+x229+(((-1.0)*x225)));
evalcond[2]=(((x224*x226))+(((0.33)*x223))+((x223*x225))+(((-1.0)*x227)));
evalcond[3]=((((-1.0)*x224*x225))+((x223*x226))+(((-1.0)*x228))+(((-0.33)*x224)));
evalcond[4]=((0.1215)+(((-0.66)*x230))+(((-1.0)*py*x228))+(((0.66)*x229))+(((-1.0)*px*x227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x231=((12.0)*py);
IkReal x232=((12.0)*px);
CheckValue<IkReal> x233=IKPowWithIntegerCheck(IKsign(((((25.0)*(px*px)))+(((25.0)*(py*py))))),-1);
if(!x233.valid){
continue;
}
CheckValue<IkReal> x234 = IKatan2WithCheck(IkReal(((((8.25)*px))+((cj5*x232))+((sj5*x231)))),IkReal(((((-1.0)*cj5*x231))+((sj5*x232))+(((-8.25)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x233.value)))+(x234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x235=IKsin(j4);
IkReal x236=IKcos(j4);
IkReal x237=((0.48)*cj5);
IkReal x238=((0.48)*sj5);
IkReal x239=((1.0)*px);
IkReal x240=((1.0)*py);
IkReal x241=(px*x235);
IkReal x242=(py*x236);
evalcond[0]=(x238+(((-1.0)*x235*x240))+(((-1.0)*x236*x239)));
evalcond[1]=((-0.33)+(((-1.0)*x236*x240))+(((-1.0)*x237))+x241);
evalcond[2]=((((0.33)*x235))+(((-1.0)*x239))+((x235*x237))+((x236*x238)));
evalcond[3]=((((-0.33)*x236))+((x235*x238))+(((-1.0)*x236*x237))+(((-1.0)*x240)));
evalcond[4]=((0.1215)+(((-1.0)*px*x239))+(((0.66)*x241))+(((-0.66)*x242))+(((-1.0)*py*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - myarm (6c33919e2bc0132812bfdd40147e9020)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
